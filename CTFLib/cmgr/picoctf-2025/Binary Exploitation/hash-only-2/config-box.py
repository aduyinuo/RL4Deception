################################################################################
# Configure a box for the custom ssh example challenge.
################################################################################


import sys
import os
import subprocess
import re
import zlib
import json



def main():

    try:
        # Generate password from seed =========================================
        seed = os.environ.get("SEED")
        
        if seed == "":
            print("Seed was not read from filesystem. Aborting.")
            sys.exit(1)

        password = hex(zlib.crc32(seed.encode()))
        password = password[2:]
        
        # =====================================================================



        # Create ctf-player user
        subprocess.run(
            [
                "/usr/sbin/useradd",
                "-U",
                "ctf-player",
                "-d",
                "/home/ctf-player",
                "-s",
                "/bin/bash",
            ],
            check=True,
        )
        
        # Pipe the output of echo into chpasswd to change password of
        # ctf-user
        pEcho = subprocess.Popen(
            (
                'echo', 
                f'ctf-player:{password}'
            ),
            stdout=subprocess.PIPE
        )
        
        output = subprocess.check_output(('chpasswd'), stdin=pEcho.stdout)
        
        pEcho.wait()
        
        # Make sure ownership is changed to ctf-player
        subprocess.run(
            [
                "/usr/bin/chown",
                "-R",
                "ctf-player:ctf-player",
                "/home/ctf-player/",
            ],
            check=True,
        )
        
        # Copy profile to ctf-player
        subprocess.run(
            [
                "/usr/bin/cp",
                "/challenge/profile",
                "/home/ctf-player/.profile",
            ],
            check=True,
        )
        
        # Change shell to rbash
        subprocess.run(
          [
            "/usr/bin/chsh",
            "-s",
            "/bin/rbash",
            "ctf-player",
          ],
          check=True,
      )

		# Compile the binary and set SUID  ============================================
		
		# Compile the source
        subprocess.run(
            [
                "/usr/bin/g++",
                "/home/ctf-player/src.cpp",
                "-o",
                "/usr/local/bin/flaghasher",
            ],
            check=True,
        )
        
        
		# Add suid
        subprocess.run(
            [
                "/usr/bin/chmod",
                "u+s",
                "/usr/local/bin/flaghasher",
            ],
            check=True,
        )
		
		# Make it executable
        subprocess.run(
            [
                "/usr/bin/chmod",
                "u+x",
                "/usr/local/bin/flaghasher",
            ],
            check=True,
        )

		# Delete the source file
        subprocess.run(
            [
                "/usr/bin/rm",
                "/home/ctf-player/src.cpp",
            ],
            check=True,
        )
        

		# Make /usr/local/bin writable
        subprocess.run(
            [
                "/usr/bin/chmod",
                "777",
                "/usr/local/bin",
            ],
            check=True,
        )
        


		# =============================================================================

        # Store flag in a root owned file  ============================================
        flag = os.environ.get("FLAG")

        if flag == "":
            print("Flag was not read from environment. Aborting.")
            sys.exit(-1)
        else:
            # Get hash part
            flag_rand = re.search("{.*}$", flag)
            if flag_rand == None:
                print("Flag isn't wrapped by curly braces. Aborting.")
                sys.exit(-2)
            else:
                flag_rand = flag_rand.group()
                flag_rand = flag_rand[1:-1]

        flag_txt = "picoCTF{Co-@utH0r_Of_Sy5tem_b!n@riEs_"
        flag = flag_txt + flag_rand + "}"
        

        with open("/root/flag.txt", "w") as f:
            f.write(flag)
            
            
             # make the flag readable only to root
        subprocess.run(
            [
                "/usr/bin/chmod",
                "600",
                "/root/flag.txt",
            ],
            check=True,
        )

        # =====================================================================


        # Create and update metadata.json =====================================

        metadata = {}
        metadata['flag'] = str(flag)
        metadata['password'] = str(password)
        json_metadata = json.dumps(metadata)
        
        with open("/challenge/metadata.json", "w") as f:
            f.write(json_metadata)

        # =====================================================================

    except subprocess.CalledProcessError:
        print("A subprocess has returned an error code")
        sys.exit(8)



# =============================================================================


if __name__ == "__main__":
    main()

